pipeline {
    agent { label 'ubuntu-agent' }

    environment {
        S3_BUCKET   = "dual-app-artifacts"
        BUILD_TAG   = "${env.BUILD_NUMBER}"
        AWS_CREDS   = 'aws-creds-id'
        AWS_REGION  = 'eu-west-2'
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saude27/Flask-Node.js-app.git'
            }
        }

        stage('Prepare Agent') {
            steps {
                sh '''
                    set -e
                    echo "Installing required tools..."
                    if [ -f /etc/os-release ]; then . /etc/os-release; fi
                    case "$ID" in
                        ubuntu|debian)
                            sudo apt update -y
                            sudo apt install -y python3 python3-venv python3-pip curl
                            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                            sudo apt install -y nodejs
                            ;;
                        amzn|rhel|centos)
                            sudo yum install -y python3 python3-pip python3-virtualenv curl
                            curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
                            sudo yum install -y nodejs
                            ;;
                        *)
                            echo "Unsupported OS: $ID"
                            exit 1
                            ;;
                    esac
                '''
            }
        }

        stage('Detect App Folders') {
            steps {
                script {
                    env.FLASK_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/requirements.txt" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()
                    env.NODE_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/package.json" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()

                    if (!env.FLASK_DIR || !env.NODE_DIR) { error "Flask or Node.js app folder not found!" }
                    echo "Detected Flask folder: ${env.FLASK_DIR}"
                    echo "Detected Node.js folder: ${env.NODE_DIR}"
                }
            }
        }

        stage('Build Apps') {
            parallel {
                stage('Build Flask App') {
                    steps {
                        sh """
                            set -e
                            cd ${FLASK_DIR}
                            python3 -m venv venv
                            . venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                        """
                    }
                }
                stage('Build Node.js App') {
                    steps {
                        sh """
                            set -e
                            cd ${NODE_DIR}
                            npm install
                        """
                    }
                }
            }
        }

        stage('Package, Extract & Upload to S3') {
            parallel {
                stage('Flask App') {
                    steps {
                        withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                            sh """
                                set -e
                                cd ${FLASK_DIR}
                                ARTIFACT="../flask-app-${BUILD_TAG}.tar.gz"
                                tar -czf \$ARTIFACT .
                                mkdir -p build/flask
                                tar -xzf \$ARTIFACT -C build/flask
                                echo "Uploading Flask artifact to S3..."
                                aws s3 cp \$ARTIFACT s3://${S3_BUCKET}/flask/ --region ${AWS_REGION}
                            """
                        }
                    }
                }
                stage('Node.js App') {
                    steps {
                        withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                            sh """
                                set -e
                                cd ${NODE_DIR}
                                ARTIFACT="../node-app-${BUILD_TAG}.tar.gz"
                                tar -czf \$ARTIFACT .
                                mkdir -p build/node
                                tar -xzf \$ARTIFACT -C build/node
                                echo "Uploading Node.js artifact to S3..."
                                aws s3 cp \$ARTIFACT s3://${S3_BUCKET}/node/ --region ${AWS_REGION}
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh """
                    set -e
                    export ANSIBLE_HOST_KEY_CHECKING=False
                    ansible-playbook -i ansible/inventory.ini ansible/site.yaml -e "BUILD_NUMBER=${BUILD_TAG}"
                """
            }
        }

        stage('Cleanup Old Artifacts') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh """
                        for folder in flask node; do
                            aws s3 ls s3://${S3_BUCKET}/\$folder/ --recursive | sort | head -n -5 | awk '{print \$4}' | while read f; do
                                [ -n "\$f" ] && aws s3 rm s3://${S3_BUCKET}/\$f --region ${AWS_REGION}
                            done
                        done
                    """
                }
            }
        }
    }

    post {
        always { cleanWs() }
        success { echo "Pipeline completed successfully!" }
        failure { echo "Pipeline failed. Check logs for details." }
    }
}



















