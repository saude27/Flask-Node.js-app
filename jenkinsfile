pipeline {
    agent { label 'ubuntu-agent' }

    environment {
        S3_BUCKET = "dual-app-artifacts"
        BUILD_TAG = "${env.BUILD_NUMBER}"   
        AWS_CREDS = 'aws-creds-id' // Replace with your Jenkins AWS credentials ID
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saude27/Flask-Node.js-app.git'
            }
        }

        stage('Detect App Folders') {
            steps {
                script {
                    // Detect Flask app folder (contains app.py or requirements.txt)
                    def flaskFolder = sh(script: "find . -maxdepth 1 -type d \\( -name '*' ! -name '.git' ! -name '.' \\) | while read d; do [ -f \"\$d/requirements.txt\" ] && echo \$d && exit; done", returnStdout: true).trim()
                    if (!flaskFolder) { error "Flask app folder not found!" }
                    env.FLASK_DIR = flaskFolder

                    // Detect Node.js app folder (contains package.json)
                    def nodeFolder = sh(script: "find . -maxdepth 1 -type d \\( -name '*' ! -name '.git' ! -name '.' \\) | while read d; do [ -f \"\$d/package.json\" ] && echo \$d && exit; done", returnStdout: true).trim()
                    if (!nodeFolder) { error "Node.js app folder not found!" }
                    env.NODE_DIR = nodeFolder

                    echo "Detected Flask folder: ${env.FLASK_DIR}"
                    echo "Detected Node.js folder: ${env.NODE_DIR}"
                }
            }
        }

        stage('Package Flask App') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS}"]]) {
                    sh """
                    echo "Packaging Flask app..."
                    cd ${env.FLASK_DIR}
                    tar -czf flask-app-${BUILD_TAG}.tar.gz --warning=no-file-changed .
                    aws s3 cp flask-app-${BUILD_TAG}.tar.gz s3://${S3_BUCKET}/flask/
                    """
                }
            }
        }

        stage('Package Node.js App') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS}"]]) {
                    sh """
                    echo "Packaging Node.js app..."
                    cd ${env.NODE_DIR}
                    tar -czf node-app-${BUILD_TAG}.tar.gz --warning=no-file-changed .
                    aws s3 cp node-app-${BUILD_TAG}.tar.gz s3://${S3_BUCKET}/node/
                    """
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh """
                export ANSIBLE_HOST_KEY_CHECKING=False
                ansible-playbook -i inventory.ini site.yml
                """
            }
        }

        stage('Cleanup Old Artifacts') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDS}"]]) {
                    sh """
                    for folder in flask node; do
                        files=(\$(aws s3 ls s3://${S3_BUCKET}/\$folder/ --recursive | sort | awk '{print \$4}'))
                        total=\${#files[@]}
                        if [ \$total -gt 5 ]; then
                            for f in "\${files[@]:0:total-5}"; do
                                echo "Deleting old artifact: \$f"
                                aws s3 rm s3://${S3_BUCKET}/\$f
                            done
                        fi
                    done
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}




