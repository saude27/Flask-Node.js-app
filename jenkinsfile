pipeline {
    agent { label 'ubuntu-agent' }

    environment {
        S3_BUCKET   = "dual-app-artifacts"
        BUILD_TAG   = "${env.BUILD_NUMBER}"
        AWS_CREDS   = 'aws-creds-id'
        AWS_REGION  = 'eu-west-2'
        VAULT_CRED  = 'ansible-vault-pass' // Jenkins credential ID for vault password
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saude27/Flask-Node.js-app.git'
            }
        }

        stage('Prepare Agent') {
            steps {
                sh '''
                    set -e
                    echo "Detecting OS..."
                    if [ -f /etc/os-release ]; then
                        . /etc/os-release
                        OS_ID="$ID"
                        OS_VERSION="$VERSION_ID"
                    else
                        echo "Cannot detect OS, exiting."
                        exit 1
                    fi
                    echo "Detected OS: $OS_ID $OS_VERSION"

                    if [ "$OS_ID" = "ubuntu" ] || [ "$OS_ID" = "debian" ]; then
                        sudo apt update -y
                        sudo apt install -y python3 python3-venv python3-pip curl
                        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                        sudo apt install -y nodejs
                    elif [ "$OS_ID" = "amzn" ] || [ "$OS_ID" = "rhel" ] || [ "$OS_ID" = "centos" ]; then
                        sudo yum install -y python3 python3-pip python3-virtualenv curl
                        curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
                        sudo yum install -y nodejs
                    else
                        echo "Unsupported OS: $OS_ID"
                        exit 1
                    fi

                    python3 --version
                    pip3 --version
                    node -v
                    npm -v
                '''
            }
        }

        stage('Detect App Folders') {
            steps {
                script {
                    env.FLASK_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/requirements.txt" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()
                    if (!env.FLASK_DIR) { error "Flask app folder not found!" }

                    env.NODE_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/package.json" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()
                    if (!env.NODE_DIR) { error "Node.js app folder not found!" }

                    echo "Detected Flask folder: ${env.FLASK_DIR}"
                    echo "Detected Node.js folder: ${env.NODE_DIR}"
                }
            }
        }

        stage('Build Apps') {
            parallel {
                stage('Build Flask App') {
                    steps {
                        sh """
                            set -e
                            cd ${FLASK_DIR}
                            python3 -m venv venv
                            . venv/bin/activate
                            pip install --upgrade pip
                            pip install -r requirements.txt
                        """
                    }
                }

                stage('Build Node.js App') {
                    steps {
                        sh """
                            set -e
                            cd ${NODE_DIR}
                            npm install
                        """
                    }
                }
            }
        }

        stage('Package & Upload Flask App') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh """
                        set -e
                        cd ${FLASK_DIR}
                        ARTIFACT="../flask-app-${BUILD_TAG}.tar.gz"
                        tar -czf \$ARTIFACT .
                        echo "Uploading Flask artifact to S3..."
                        aws s3 cp \$ARTIFACT s3://${S3_BUCKET}/flask/ --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Package & Upload Node.js App') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh """
                        set -e
                        cd ${NODE_DIR}
                        ARTIFACT="../node-app-${BUILD_TAG}.tar.gz"
                        tar -czf \$ARTIFACT .
                        echo "Uploading Node.js artifact to S3..."
                        aws s3 cp \$ARTIFACT s3://${S3_BUCKET}/node/ --region ${AWS_REGION}
                    """
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                withCredentials([string(credentialsId: "${VAULT_CRED}", variable: 'VAULT_PASS')]) {
                    sh """
                        set -e
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        echo "\$VAULT_PASS" > /tmp/.vault_pass.txt
                        ansible-playbook -i ansible/inventory.ini ansible/site.yaml --vault-password-file /tmp/.vault_pass.txt -e "BUILD_NUMBER=${BUILD_TAG}"
                        rm -f /tmp/.vault_pass.txt
                    """
                }
            }
        }

        stage('Cleanup Old Artifacts') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh """
                        set -e
                        for folder in flask node; do
                            aws s3 ls s3://${S3_BUCKET}/\$folder/ --recursive | sort | head -n -5 | awk '{print \$4}' | while read f; do
                                if [ -n "\$f" ]; then
                                    echo "Deleting old artifact: \$f"
                                    aws s3 rm s3://${S3_BUCKET}/\$f --region ${AWS_REGION}
                                fi
                            done
                        done
                    """
                }
            }
        }
    }

    post {
        always { cleanWs() }
        success { echo "Pipeline completed successfully!" }
        failure { echo "Pipeline failed. Check logs for details." }
    }
}

















