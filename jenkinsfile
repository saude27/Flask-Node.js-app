pipeline {
    agent { label 'ubuntu-agent' }

    parameters {
        string(name: 'FLASK_VERSION', defaultValue: '1.0.0', description: 'Flask app version')
        string(name: 'NODE_VERSION', defaultValue: '1.0.0', description: 'Node.js app version')
        choice(name: 'APP_TYPE', choices: ['flask', 'node', 'both'], description: 'App(s) to build')
    }

    environment {
        S3_BUCKET = "dual-app-artifacts"
        AWS_REGION = "eu-west-2"
        AWS_CREDS = 'aws-creds-id'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saude27/Flask-Node.js-app.git'
            }
        }

        stage('Prepare Agent') {
            steps {
                sh '''
                    set -e
                    echo "Installing required tools..."
                    sudo apt update -y
                    sudo apt install -y python3 python3-venv python3-pip nodejs npm awscli
                '''
            }
        }

        stage('Build Apps') {
            parallel {
                stage('Build Flask App') {
                    when { expression { params.APP_TYPE == 'flask' || params.APP_TYPE == 'both' } }
                    steps {
                        sh """
                            echo "üèóÔ∏è Building Flask app v${params.FLASK_VERSION}"
                            [ -d "apps/flask-app" ] || { echo "Flask app directory not found"; exit 1; }
                            python3 -m venv apps/flask-app/venv
                            . apps/flask-app/venv/bin/activate
                            pip install --upgrade pip
                            pip install -r apps/flask-app/requirements.txt
                            mkdir -p artifacts
                            tar -czf artifacts/flask-app-${params.FLASK_VERSION}.tar.gz -C apps/flask-app .
                            echo "‚úÖ Flask artifact created: artifacts/flask-app-${params.FLASK_VERSION}.tar.gz"
                        """
                    }
                }

                stage('Build Node.js App') {
                    when { expression { params.APP_TYPE == 'node' || params.APP_TYPE == 'both' } }
                    steps {
                        sh """
                            echo "üèóÔ∏è Building Node.js app v${params.NODE_VERSION}"
                            [ -d "apps/node-app" ] || { echo "Node.js app directory not found"; exit 1; }
                            cd apps/node-app
                            npm install
                            cd ../../
                            mkdir -p artifacts
                            tar -czf artifacts/node-app-${params.NODE_VERSION}.tar.gz -C apps/node-app .
                            echo "‚úÖ Node.js artifact created: artifacts/node-app-${params.NODE_VERSION}.tar.gz"
                        """
                    }
                }
            }
        }

        stage('Upload Artifacts to S3') {
            steps {
                script {
                    echo "üì§ Uploading artifacts to S3..."
                    def s3BasePath = "deployments/${env.JOB_NAME}/${env.BUILD_NUMBER}_${env.BUILD_TIMESTAMP}"

                    // Ensure bucket exists
                    sh "aws s3 mb s3://${env.S3_BUCKET} || echo 'Bucket already exists or creation failed'"

                    if (fileExists("artifacts/flask-app-${params.FLASK_VERSION}.tar.gz")) {
                        sh """
                            echo "Uploading Flask artifact..."
                            aws s3 cp artifacts/flask-app-${params.FLASK_VERSION}.tar.gz \
                                s3://${env.S3_BUCKET}/${s3BasePath}/flask-app-${params.FLASK_VERSION}.tar.gz \
                                --metadata version=${params.FLASK_VERSION},build=${env.BUILD_NUMBER},timestamp=${env.BUILD_TIMESTAMP}
                            echo "‚úÖ Flask artifact uploaded"
                        """
                    }

                    if (fileExists("artifacts/node-app-${params.NODE_VERSION}.tar.gz")) {
                        sh """
                            echo "Uploading Node.js artifact..."
                            aws s3 cp artifacts/node-app-${params.NODE_VERSION}.tar.gz \
                                s3://${env.S3_BUCKET}/${s3BasePath}/node-app-${params.NODE_VERSION}.tar.gz \
                                --metadata version=${params.NODE_VERSION},build=${env.BUILD_NUMBER},timestamp=${env.BUILD_TIMESTAMP}
                            echo "‚úÖ Node.js artifact uploaded"
                        """
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh """
                    set -e
                    export ANSIBLE_HOST_KEY_CHECKING=False
                    ansible-playbook -i ansible/inventory.ini ansible/site.yaml -e "BUILD_NUMBER=${env.BUILD_NUMBER}"
                """
            }
        }

        stage('Cleanup Old Artifacts') {
            steps {
                script {
                    echo "üßπ Cleaning up old artifacts in S3..."
                    def folders = ['flask', 'node']
                    folders.each { folder ->
                        sh """
                            aws s3 ls s3://${env.S3_BUCKET}/${folder}/ --recursive | sort | head -n -5 | awk '{print \$4}' | while read f; do
                                [ -n "\$f" ] && aws s3 rm s3://${env.S3_BUCKET}/\$f --region ${AWS_REGION}
                            done
                        """
                    }
                }
            }
        }
    }

    post {
        always { cleanWs() }
        success { echo "üéâ Pipeline completed successfully!" }
        failure { echo "‚ùå Pipeline failed. Check logs for details." }
    }
}




















