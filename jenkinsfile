pipeline {
    agent { label 'ubuntu-agent' }

    environment {
        S3_BUCKET   = "dual-app-artifacts"
        BUILD_TAG   = "${env.BUILD_NUMBER}"
        AWS_CREDS   = 'aws-creds-id'
        AWS_REGION  = 'eu-west-2'
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/saude27/Flask-Node.js-app.git'
            }
        }

        stage('Prepare Agent') {
            steps {
                sh '''
                    #!/bin/bash
                    set -e
                    echo "Detecting OS..."
                    if [ -f /etc/os-release ]; then
                        . /etc/os-release
                        OS_ID=$ID
                        OS_VERSION=$VERSION_ID
                    else
                        echo "Cannot detect OS, exiting."
                        exit 1
                    fi
                    echo "Detected OS: $OS_ID $OS_VERSION"

                    if [[ "$OS_ID" == "ubuntu" || "$OS_ID" == "debian" ]]; then
                        echo "Installing dependencies on Ubuntu/Debian..."
                        sudo apt update -y
                        sudo apt install -y python3 python3-venv python3-pip curl
                        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                        sudo apt install -y nodejs

                    elif [[ "$OS_ID" == "amzn" || "$OS_ID" == "rhel" || "$OS_ID" == "centos" ]]; then
                        echo "Installing dependencies on Amazon Linux / RHEL..."
                        sudo yum install -y python3 python3-pip python3-virtualenv curl
                        curl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -
                        sudo yum install -y nodejs
                    else
                        echo "Unsupported OS: $OS_ID"
                        exit 1
                    fi

                    # Verify installations
                    python3 --version
                    pip3 --version
                    node -v
                    npm -v
                '''
            }
        }

        stage('Detect App Folders') {
            steps {
                script {
                    env.FLASK_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/requirements.txt" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()
                    if (!env.FLASK_DIR) { error "Flask app folder not found!" }

                    env.NODE_DIR = sh(script: '''
                        for d in */ ; do
                            [ -f "$d/package.json" ] && echo $d && break
                        done
                    ''', returnStdout: true).trim()
                    if (!env.NODE_DIR) { error "Node.js app folder not found!" }

                    echo "Detected Flask folder: ${env.FLASK_DIR}"
                    echo "Detected Node.js folder: ${env.NODE_DIR}"
                }
            }
        }

        stage('Build Apps') {
            parallel {
                stage('Build Flask App') {
                    steps {
                        sh '''
                            #!/bin/bash
                            set -e
                            echo "Building Flask app..."
                            cd ${FLASK_DIR}
                            python3 -m venv venv
                            source venv/bin/activate
                            pip install -r requirements.txt
                            # Optional: run tests here
                            # pytest tests/
                        '''
                    }
                }

                stage('Build Node.js App') {
                    steps {
                        sh '''
                            #!/bin/bash
                            set -e
                            echo "Building Node.js app..."
                            cd ${NODE_DIR}
                            npm install
                            # Optional: run tests here
                            # npm test
                        '''
                    }
                }
            }
        }

        stage('Package & Upload Flask App') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh '''
                        #!/bin/bash
                        set -e
                        echo "Packaging Flask app..."
                        cd ${FLASK_DIR}
                        ARTIFACT=flask-app-${BUILD_TAG}.tar.gz
                        tar -czf $ARTIFACT .
                        ls -lh $ARTIFACT
                        echo "Uploading Flask artifact to S3..."
                        aws s3 cp $ARTIFACT s3://${S3_BUCKET}/flask/ --region ${AWS_REGION}
                    '''
                }
            }
        }

        stage('Package & Upload Node.js App') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh '''
                        #!/bin/bash
                        set -e
                        echo "Packaging Node.js app..."
                        cd ${NODE_DIR}
                        ARTIFACT=node-app-${BUILD_TAG}.tar.gz
                        tar -czf $ARTIFACT .
                        ls -lh $ARTIFACT
                        echo "Uploading Node.js artifact to S3..."
                        aws s3 cp $ARTIFACT s3://${S3_BUCKET}/node/ --region ${AWS_REGION}
                    '''
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                sh '''
                    #!/bin/bash
                    export ANSIBLE_HOST_KEY_CHECKING=False
                    ansible-playbook -i ansible/inventory.ini ansible/site.yaml -e "BUILD_NUMBER=${BUILD_TAG}"
                '''
            }
        }

        stage('Cleanup Old Artifacts') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: "${AWS_CREDS}") {
                    sh '''
                        #!/bin/bash
                        set -e
                        for folder in flask node; do
                            files=($(aws s3 ls s3://${S3_BUCKET}/$folder/ --recursive | sort | awk '{print $4}'))
                            total=${#files[@]}
                            if [ $total -gt 5 ]; then
                                for f in "${files[@]:0:total-5}"; do
                                    echo "Deleting old artifact: $f"
                                    aws s3 rm s3://${S3_BUCKET}/$f --region ${AWS_REGION}
                                done
                            fi
                        done
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for details."
        }
    }
}









